@model Boolean

@{
    var hintId = string.Empty;
    var showErrorClass = string.Empty;
    var errorKey = ViewData.ModelMetadata.PropertyName;

    if (ViewData.ModelState.Keys.Contains(errorKey))
    {
        if (ViewData.ModelState[errorKey] != null && ViewData.ModelState[errorKey].Errors.Any())
        {
            showErrorClass = "govuk-form-group--error";
        }
    }
}

<div class="govuk-form-group @showErrorClass">
    @Html.LabelFor(model => model, new { @class = "govuk-label" })

    @if (!string.IsNullOrWhiteSpace(ViewData.ModelMetadata.Description))
    {
        hintId = ViewData.ModelMetadata.Name + "-hint";

        <span id="@hintId" class="govuk-hint">
            @ViewData.ModelMetadata.Description
        </span>
    }

    @Html.ValidationMessageFor(model => model, string.Empty, new { @class = "govuk-error-message", @id = ViewData.ModelMetadata.Name + "-error" })

    <div class="govuk-checkboxes">
        <div class="govuk-checkboxes__item">
            @Html.CheckBoxFor(model => model, new
            {
                @class = "govuk-checkboxes__input",
                autocomplete = "off",
                aria_describedby = hintId
            })

            <label class="govuk-label govuk-checkboxes__label" for="@ViewData.ModelMetadata.Name">@ViewData.ModelMetadata.Placeholder</label>
        </div>
    </div>
</div>
